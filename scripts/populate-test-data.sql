-- Script para popular o banco de dados com dados de teste
-- Execute este script após criar as tabelas

-- Inserir scripts de teste
INSERT INTO "Scripts" ("Nome", "Descricao", "Codigo", "CriadoEm") VALUES
('Banco Central - Estatísticas de Pagamento', 'Script para processar dados de estatísticas de meios de pagamento do Banco Central', 'function process(data) { const corporativeData = data.filter(item => item.produto === "Empresarial"); const byQuarterAndIssuer = corporativeData.reduce((acc, item) => { const key = `${item.trimestre}-${item.nomeBandeira}`; if (!acc[key]) { acc[key] = { trimestre: item.trimestre, nomeBandeira: item.nomeBandeira, qtdCartoesEmitidos: 0, qtdCartoesAtivos: 0, qtdTransacoesNacionais: 0, valorTransacoesNacionais: 0, qtdTransacoesInternacionais: 0, valorTransacoesInternacionais: 0 }; } acc[key].qtdCartoesEmitidos += item.qtdCartoesEmitidos; acc[key].qtdCartoesAtivos += item.qtdCartoesAtivos; acc[key].qtdTransacoesNacionais += item.qtdTransacoesNacionais; acc[key].valorTransacoesNacionais += item.valorTransacoesNacionais; acc[key].qtdTransacoesInternacionais += item.qtdTransacoesInternacionais; acc[key].valorTransacoesInternacionais += item.valorTransacoesInternacionais; return acc; }, {}); return Object.values(byQuarterAndIssuer); }', CURRENT_TIMESTAMP),
('E-commerce - Análise de Vendas', 'Script para análise de vendas de e-commerce por categoria', 'function process(data) { const sixMonthsAgo = new Date(); sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6); const recentSales = data.filter(item => { const saleDate = new Date(item.dataVenda); return saleDate >= sixMonthsAgo && item.status === "Concluída"; }); const salesByCategory = recentSales.reduce((acc, item) => { const category = item.categoria; if (!acc[category]) { acc[category] = { categoria: category, totalVendas: 0, quantidadeItens: 0, ticketMedio: 0, vendasPorMes: {}, produtosMaisVendidos: {} }; } acc[category].totalVendas += item.valorVenda; acc[category].quantidadeItens += item.quantidade; const month = new Date(item.dataVenda).toISOString().substring(0, 7); if (!acc[category].vendasPorMes[month]) { acc[category].vendasPorMes[month] = 0; } acc[category].vendasPorMes[month] += item.valorVenda; if (!acc[category].produtosMaisVendidos[item.produto]) { acc[category].produtosMaisVendidos[item.produto] = 0; } acc[category].produtosMaisVendidos[item.produto] += item.quantidade; return acc; }, {}); Object.keys(salesByCategory).forEach(category => { const cat = salesByCategory[category]; cat.ticketMedio = cat.totalVendas / cat.quantidadeItens; cat.produtosMaisVendidos = Object.entries(cat.produtosMaisVendidos).sort(([,a], [,b]) => b - a).slice(0, 5).reduce((acc, [produto, quantidade]) => { acc[produto] = quantidade; return acc; }, {}); }); return Object.values(salesByCategory); }', CURRENT_TIMESTAMP),
('Customer Segmentation', 'Script para segmentação de clientes baseado em comportamento de compra', 'function process(data) { const customerMetrics = data.reduce((acc, item) => { const customerId = item.clienteId; if (!acc[customerId]) { acc[customerId] = { clienteId: customerId, nome: item.nome, email: item.email, totalCompras: 0, valorTotal: 0, primeiraCompra: new Date(item.dataCompra), ultimaCompra: new Date(item.dataCompra), categoriasCompradas: new Set(), frequenciaCompras: 0 }; } const customer = acc[customerId]; customer.totalCompras += item.quantidade; customer.valorTotal += item.valorCompra; customer.categoriasCompradas.add(item.categoria); const compraDate = new Date(item.dataCompra); if (compraDate < customer.primeiraCompra) { customer.primeiraCompra = compraDate; } if (compraDate > customer.ultimaCompra) { customer.ultimaCompra = compraDate; } return acc; }, {}); const segmentedCustomers = Object.values(customerMetrics).map(customer => { const mesesAtivo = Math.max(1, (customer.ultimaCompra - customer.primeiraCompra) / (1000 * 60 * 60 * 24 * 30)); customer.frequenciaCompras = customer.totalCompras / mesesAtivo; let segmento = "Bronze"; if (customer.valorTotal >= 10000 && customer.frequenciaCompras >= 2) { segmento = "Diamante"; } else if (customer.valorTotal >= 5000 && customer.frequenciaCompras >= 1) { segmento = "Ouro"; } else if (customer.valorTotal >= 1000 && customer.frequenciaCompras >= 0.5) { segmento = "Prata"; } const hoje = new Date(); const diasRecencia = Math.floor((hoje - customer.ultimaCompra) / (1000 * 60 * 60 * 24)); return { clienteId: customer.clienteId, nome: customer.nome, email: customer.email, segmento: segmento, valorTotal: customer.valorTotal, totalCompras: customer.totalCompras, ticketMedio: customer.valorTotal / customer.totalCompras, frequenciaCompras: customer.frequenciaCompras, recenciaDias: diasRecencia, categoriasCompradas: Array.from(customer.categoriasCompradas), primeiraCompra: customer.primeiraCompra.toISOString().split("T")[0], ultimaCompra: customer.ultimaCompra.toISOString().split("T")[0] }; }); return segmentedCustomers.sort((a, b) => b.valorTotal - a.valorTotal); }', CURRENT_TIMESTAMP);

-- Inserir execuções de scripts de teste
INSERT INTO "ExecucoesScript" ("Nome", "Descricao", "CodigoScript", "DadosTeste", "Categoria", "Versao", "Ativo", "TempoExecucaoMs", "CriadoEm") VALUES
('Teste Banco Central v1', 'Teste do script de estatísticas do Banco Central', 'function process(data) { const corporativeData = data.filter(item => item.produto === "Empresarial"); const byQuarterAndIssuer = corporativeData.reduce((acc, item) => { const key = `${item.trimestre}-${item.nomeBandeira}`; if (!acc[key]) { acc[key] = { trimestre: item.trimestre, nomeBandeira: item.nomeBandeira, qtdCartoesEmitidos: 0, qtdCartoesAtivos: 0, qtdTransacoesNacionais: 0, valorTransacoesNacionais: 0, qtdTransacoesInternacionais: 0, valorTransacoesInternacionais: 0 }; } acc[key].qtdCartoesEmitidos += item.qtdCartoesEmitidos; acc[key].qtdCartoesAtivos += item.qtdCartoesAtivos; acc[key].qtdTransacoesNacionais += item.qtdTransacoesNacionais; acc[key].valorTransacoesNacionais += item.valorTransacoesNacionais; acc[key].qtdTransacoesInternacionais += item.qtdTransacoesInternacionais; acc[key].valorTransacoesInternacionais += item.valorTransacoesInternacionais; return acc; }, {}); return Object.values(byQuarterAndIssuer); }', '[{"trimestre":"20231","nomeBandeira":"VISA","nomeFuncao":"Crédito","produto":"Empresarial","qtdCartoesEmitidos":3050384,"qtdCartoesAtivos":1716709,"qtdTransacoesNacionais":43984902,"valorTransacoesNacionais":12846611557.78,"qtdTransacoesInternacionais":470796,"valorTransacoesInternacionais":397043258.04},{"trimestre":"20231","nomeBandeira":"Mastercard","nomeFuncao":"Crédito","produto":"Empresarial","qtdCartoesEmitidos":2876543,"qtdCartoesAtivos":1654321,"qtdTransacoesNacionais":39876543,"valorTransacoesNacionais":11543210987.65,"qtdTransacoesInternacionais":345678,"valorTransacoesInternacionais":234567890.12}]', 'Banco Central', 1, true, NULL, CURRENT_TIMESTAMP),
('Teste E-commerce v1', 'Teste do script de análise de vendas', 'function process(data) { const sixMonthsAgo = new Date(); sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6); const recentSales = data.filter(item => { const saleDate = new Date(item.dataVenda); return saleDate >= sixMonthsAgo && item.status === "Concluída"; }); const salesByCategory = recentSales.reduce((acc, item) => { const category = item.categoria; if (!acc[category]) { acc[category] = { categoria: category, totalVendas: 0, quantidadeItens: 0, ticketMedio: 0, vendasPorMes: {}, produtosMaisVendidos: {} }; } acc[category].totalVendas += item.valorVenda; acc[category].quantidadeItens += item.quantidade; const month = new Date(item.dataVenda).toISOString().substring(0, 7); if (!acc[category].vendasPorMes[month]) { acc[category].vendasPorMes[month] = 0; } acc[category].vendasPorMes[month] += item.valorVenda; if (!acc[category].produtosMaisVendidos[item.produto]) { acc[category].produtosMaisVendidos[item.produto] = 0; } acc[category].produtosMaisVendidos[item.produto] += item.quantidade; return acc; }, {}); Object.keys(salesByCategory).forEach(category => { const cat = salesByCategory[category]; cat.ticketMedio = cat.totalVendas / cat.quantidadeItens; cat.produtosMaisVendidos = Object.entries(cat.produtosMaisVendidos).sort(([,a], [,b]) => b - a).slice(0, 5).reduce((acc, [produto, quantidade]) => { acc[produto] = quantidade; return acc; }, {}); }); return Object.values(salesByCategory); }', '[{"id":1,"clienteId":"CLI001","produto":"iPhone 14 Pro","categoria":"Eletrônicos","quantidade":1,"valorVenda":8999.99,"dataVenda":"2024-01-15T10:30:00Z","status":"Concluída","formaPagamento":"Cartão de Crédito"},{"id":2,"clienteId":"CLI002","produto":"MacBook Air M2","categoria":"Eletrônicos","quantidade":1,"valorVenda":12999.99,"dataVenda":"2024-01-20T14:15:00Z","status":"Concluída","formaPagamento":"PIX"}]', 'E-commerce', 1, true, NULL, CURRENT_TIMESTAMP),
('Teste Customer Segmentation v1', 'Teste do script de segmentação de clientes', 'function process(data) { const customerMetrics = data.reduce((acc, item) => { const customerId = item.clienteId; if (!acc[customerId]) { acc[customerId] = { clienteId: customerId, nome: item.nome, email: item.email, totalCompras: 0, valorTotal: 0, primeiraCompra: new Date(item.dataCompra), ultimaCompra: new Date(item.dataCompra), categoriasCompradas: new Set(), frequenciaCompras: 0 }; } const customer = acc[customerId]; customer.totalCompras += item.quantidade; customer.valorTotal += item.valorCompra; customer.categoriasCompradas.add(item.categoria); const compraDate = new Date(item.dataCompra); if (compraDate < customer.primeiraCompra) { customer.primeiraCompra = compraDate; } if (compraDate > customer.ultimaCompra) { customer.ultimaCompra = compraDate; } return acc; }, {}); const segmentedCustomers = Object.values(customerMetrics).map(customer => { const mesesAtivo = Math.max(1, (customer.ultimaCompra - customer.primeiraCompra) / (1000 * 60 * 60 * 24 * 30)); customer.frequenciaCompras = customer.totalCompras / mesesAtivo; let segmento = "Bronze"; if (customer.valorTotal >= 10000 && customer.frequenciaCompras >= 2) { segmento = "Diamante"; } else if (customer.valorTotal >= 5000 && customer.frequenciaCompras >= 1) { segmento = "Ouro"; } else if (customer.valorTotal >= 1000 && customer.frequenciaCompras >= 0.5) { segmento = "Prata"; } const hoje = new Date(); const diasRecencia = Math.floor((hoje - customer.ultimaCompra) / (1000 * 60 * 60 * 24)); return { clienteId: customer.clienteId, nome: customer.nome, email: customer.email, segmento: segmento, valorTotal: customer.valorTotal, totalCompras: customer.totalCompras, ticketMedio: customer.valorTotal / customer.totalCompras, frequenciaCompras: customer.frequenciaCompras, recenciaDias: diasRecencia, categoriasCompradas: Array.from(customer.categoriasCompradas), primeiraCompra: customer.primeiraCompra.toISOString().split("T")[0], ultimaCompra: customer.ultimaCompra.toISOString().split("T")[0] }; }); return segmentedCustomers.sort((a, b) => b.valorTotal - a.valorTotal); }', '[{"clienteId":"CLI001","nome":"João Silva","email":"joao.silva@email.com","quantidade":1,"valorCompra":8999.99,"categoria":"Eletrônicos","dataCompra":"2024-01-15T10:30:00Z"},{"clienteId":"CLI001","nome":"João Silva","email":"joao.silva@email.com","quantidade":1,"valorCompra":2499.99,"categoria":"Eletrônicos","dataCompra":"2024-02-10T16:20:00Z"}]', 'Customer Segmentation', 1, true, NULL, CURRENT_TIMESTAMP);

-- Verificar os dados inseridos
SELECT 'Scripts inseridos:' as info;
SELECT "Id", "Nome", "CriadoEm" FROM "Scripts";

SELECT 'ExecucoesScript inseridos:' as info;
SELECT "Id", "Nome", "Categoria", "Versao", "Ativo" FROM "ExecucoesScript";
